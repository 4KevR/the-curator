from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


# This file is auto-generated by using datamodel-codegen.
# Just leave it as is, it is only used as intermediate data representation.
# Internal classes for parsing:
# generated by datamodel-codegen:
#   filename:  test_schema.json
#   timestamp: 2025-05-19T10:57:24+00:00


# noinspection PyPep8Naming
class _Test_Card(BaseModel):
    class Config:
        extra = "forbid"

    question: str
    answer: str
    flag: str
    cardState: str


# noinspection PyPep8Naming
class _Test_TestDecks(BaseModel):
    class Config:
        extra = "forbid"

    name: str
    cards: List[_Test_Card]


# noinspection PyPep8Naming
class _Test_DummyEnvironments(BaseModel):
    class Config:
        extra = "forbid"

    decks: List[str]


# noinspection PyPep8Naming
class _Test_Card_Fuzzy(BaseModel):
    class Config:
        extra = "forbid"

    question: str
    answer: str
    flag: str
    cardState: str
    field_fuzzymatch: List[str] = Field([], alias="__fuzzymatch")


# noinspection PyPep8Naming
class _Test_Deck(BaseModel):
    class Config:
        extra = "forbid"

    name: str
    cards: List[_Test_Card_Fuzzy]


# noinspection PyPep8Naming
class _Test_ExpectedResult(BaseModel):
    decks: List[Union[str, _Test_Deck]]


# noinspection PyPep8Naming
class _Test_Test(BaseModel):
    class Config:
        extra = "forbid"

    name: str
    description: Optional[str] = None
    environment: str
    queries: List[List[str]]
    params: Optional[Dict[str, Any]] = None
    expected_result: _Test_ExpectedResult


# noinspection PyPep8Naming
class _Test_QuestionAnsweringItem(BaseModel):
    class Config:
        extra = "forbid"

    name: str
    description: str
    environment: str
    queries: List[List[str]]
    expected_answer: str


# noinspection PyPep8Naming
class _Test_Data(BaseModel):
    test_decks: Optional[Dict[str, _Test_TestDecks]] = None
    dummy_environments: Optional[Dict[str, _Test_DummyEnvironments]] = None
    tests: Optional[List[_Test_Test]] = None
    question_answering: Optional[Dict[str, List[_Test_QuestionAnsweringItem]]] = None
